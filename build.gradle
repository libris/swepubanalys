configurations {
    moreLibs
}

loadConfiguration()

def loadConfiguration() {
    def environment = hasProperty('env') ? env : 'dev'
    project.ext.environment = environment
    def configFile = file('configValues.groovy')
    def config = new ConfigSlurper(environment).parse(configFile.toURI().toURL())
    println config.toString()
    config.mode = ext.environment
    config.buildTimeStamp = (new Date()).format('yyyy-MM-dd HH:mm:ss')
    file('./src/main/resources/config.groovy').text = config.prettyPrint
}

group 'SwePubAnalysisWeb'
version '1.1-SNAPSHOT'

apply plugin: 'groovy'
apply plugin: 'war'
apply plugin: 'com.moowork.node'

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "com.moowork.gradle:gradle-node-plugin:0.11"
    }
}



repositories {
    mavenCentral()
}



war {

    baseName = 'ROOT'
    version = ''// + System.currentTimeMillis();
    //from 'src/main/resources/public' // adds a file-set to the root of the archive
    //into 'public'
    //classpath {from('/'){include 'config.groovy'}}
    //webInf { from 'src/' } // adds a file-set to the WEB-INF dir.
    //classpath fileTree('') // adds a file-set to the WEB-INF/lib dir.
    //classpath configurations.moreLibs // adds a configuration to the WEB-INF/lib dir.
    webXml = file('../SwePubAnalysisWeb/WEB-INF/web.xml') // copies a file to WEB-INF/web.xml
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.5','javax.mail:javax.mail-api:1.5.4', 'com.sparkjava:spark-core:2.3', 'com.sparkjava:spark-template-mustache:1.0.0', 'com.github.groovy-wslite:groovy-wslite:1.1.2', 'commons-validator:commons-validator:1.4.1'
    testCompile group: 'junit', name: 'junit', version: '4.11'

}


task webPackCreateBundle(type: Exec) {
    commandLine 'sh', '-c', 'webpack'
}

task bowerSyncComponentsForBeta(type: Sync) {
    from 'bower_components'
    into "src/main/resources/public/1.0/compiled"
    include 'jquery/dist/jquery.js'
    include 'bootstrap/dist/js/bootstrap.min.js'
    include 'handsontable/dist/handsontable.full.js'
    include 'bootstrap/dist/css/bootstrap.css'
    include 'bootstrap/dist/css/bootstrap.css.map'
    include 'kungbib-styles/dist/css/kb-style.css'
    include 'font-awesome/css/font-awesome.css'
    include 'font-awesome/fonts/*.*'
    include 'handsontable/dist/handsontable.full.css'
}

task bowerSyncComponentsForQf(type: Sync) {
    from 'bower_components'
    into "src/main/resources/public/2.0/vendor"
    include 'bootstrap/dist/js/bootstrap.min.js'
    include 'bootstrap/dist/css/bootstrap.min.css'
    include 'bootstrap/dist/css/bootstrap.css.map'
    include 'bootstrap/dist/fonts/*.*'
    include 'kungbib-styles/dist/css/kb-style.css'
    include 'kungbib-styles/dist/assets/*.*'
    include 'font-awesome/fonts/*.*'
    include 'font-awesome/css/font-awesome.min.css'
}

task CopyMissingFonts(type: Copy) {
    from('bower_components/bootstrap/fonts')
    into('src/main/resources/public/2.0/vendor/kungbib-styles/dist/fonts')
}

task bowerInstall(type: Exec) {
    commandLine './node_modules/bower/bin/bower', 'install'
}

task webpack(type: Exec) {
    if (project.environment == 'prod')
        commandLine 'webpack', '-p'
    else
        commandLine 'webpack'

}

war.dependsOn  npmInstall,bowerInstall,bowerSyncComponentsForBeta, bowerSyncComponentsForQf, CopyMissingFonts, webpack








